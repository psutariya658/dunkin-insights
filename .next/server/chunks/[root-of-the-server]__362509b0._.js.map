{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/Admin/Desktop/project/dunkin-feedback/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient()\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":["file:///Users/Admin/Desktop/project/dunkin-feedback/src/app/api/reviews/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport { prisma } from '@/lib/prisma'\n\nexport async function GET() {\n  try {\n    const reviews = await prisma.review.findMany({\n      include: {\n        user: {\n          select: {\n            name: true,\n          },\n        },\n        product: {\n          select: {\n            name: true,\n          },\n        },\n        employee: {\n          select: {\n            name: true,\n          },\n        },\n      },\n      orderBy: {\n        createdAt: 'desc',\n      },\n    })\n\n    return NextResponse.json(reviews)\n  } catch (error) {\n    console.error('Error fetching reviews:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function POST(request: Request) {\n  try {\n    const data = await request.json()\n\n    // Validate required fields\n    if (!data.userId || !data.rating || (!data.productId && !data.employeeId)) {\n      return NextResponse.json(\n        { error: 'Missing required fields' },\n        { status: 400 }\n      )\n    }\n\n    // Check if user exists, if not create a temporary user for anonymous reviews\n    let user = await prisma.user.findUnique({ where: { id: data.userId } })\n    if (!user) {\n      try {\n        user = await prisma.user.create({\n          data: {\n            id: data.userId,\n            email: `${data.userId}@temp.com`,\n            name: data.customerName || 'Anonymous Customer',\n            role: 'CUSTOMER',\n            password: 'temp-password', // Required field\n            hashedPassword: 'temp-password', // This won't be used for login\n          },\n        })\n      } catch (e) {\n        // Ignore if user was created in a concurrent request\n      }\n    }\n\n    // If review is for an employee, update their average rating\n    if (data.employeeId) {\n      const review = await prisma.$transaction(async (tx) => {\n        const newReview = await tx.review.create({\n          data: {\n            rating: data.rating,\n            comment: data.comment,\n            customerName: data.customerName,\n            userId: data.userId,\n            employeeId: data.employeeId,\n          },\n        })\n\n        const ratingAggregation = await tx.review.aggregate({\n          _avg: { rating: true },\n          _count: { rating: true },\n          where: { employeeId: data.employeeId },\n        })\n\n        await tx.employee.update({\n          where: { id: data.employeeId },\n          data: {\n            averageRating: ratingAggregation._avg.rating,\n            reviewCount: ratingAggregation._count.rating,\n          },\n        })\n\n        return newReview\n      })\n\n      const resultWithRelations = await prisma.review.findUnique({\n        where: { id: review.id },\n        include: {\n          user: { select: { name: true } },\n          employee: { select: { name: true } },\n        },\n      })\n\n      return NextResponse.json(resultWithRelations)\n    } else {\n      // Handle product reviews\n      const review = await prisma.review.create({\n        data: {\n          rating: data.rating,\n          comment: data.comment,\n          customerName: data.customerName,\n          userId: data.userId,\n          productId: data.productId,\n        },\n        include: {\n          user: { select: { name: true } },\n          product: { select: { name: true } },\n        },\n      })\n      return NextResponse.json(review)\n    }\n  } catch (error) {\n    console.error('Error creating review:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function DELETE(request: Request) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const id = searchParams.get('id')\n\n    if (!id) {\n      return NextResponse.json(\n        { error: 'Review ID is required' },\n        { status: 400 }\n      )\n    }\n\n    await prisma.review.delete({\n      where: { id },\n    })\n\n    return NextResponse.json({ success: true })\n  } catch (error) {\n    console.error('Error deleting review:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}