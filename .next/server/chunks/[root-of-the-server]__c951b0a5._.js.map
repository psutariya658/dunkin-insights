{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/Admin/Desktop/project/dunkin-feedback/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient()\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":["file:///Users/Admin/Desktop/project/dunkin-feedback/src/app/api/dashboard/stats/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport { prisma } from '@/lib/prisma'\n\nexport async function GET() {\n  try {\n    const [totalEmployees, totalProducts, totalReviews] = await Promise.all([\n      prisma.employee.count(),\n      prisma.product.count(),\n      prisma.review.count({\n        where: {\n          comment: {\n            not: null,\n          },\n        },\n      }),\n    ])\n\n    return NextResponse.json({\n      totalEmployees,\n      totalProducts,\n      totalReviews,\n    })\n  } catch (error) {\n    console.error('Error fetching dashboard stats:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,CAAC,gBAAgB,eAAe,aAAa,GAAG,MAAM,QAAQ,GAAG,CAAC;YACtE,sHAAA,CAAA,SAAM,CAAC,QAAQ,CAAC,KAAK;YACrB,sHAAA,CAAA,SAAM,CAAC,OAAO,CAAC,KAAK;YACpB,sHAAA,CAAA,SAAM,CAAC,MAAM,CAAC,KAAK,CAAC;gBAClB,OAAO;oBACL,SAAS;wBACP,KAAK;oBACP;gBACF;YACF;SACD;QAED,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB;YACA;YACA;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mCAAmC;QACjD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}