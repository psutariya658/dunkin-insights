{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/Admin/Desktop/project/dunkin-feedback/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient()\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":["file:///Users/Admin/Desktop/project/dunkin-feedback/src/app/api/stats/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport { prisma } from '@/lib/prisma'\n\nexport async function GET() {\n  try {\n    // Get all reviews to calculate statistics\n    const reviews = await prisma.review.findMany({\n      select: {\n        rating: true,\n        comment: true,\n        userId: true,\n      },\n    })\n\n    // Calculate total unique customers (based on unique userIds)\n    const uniqueCustomers = new Set(reviews.map(review => review.userId)).size\n\n    // Calculate average rating\n    const totalRating = reviews.reduce((sum, review) => sum + review.rating, 0)\n    const averageRating = reviews.length > 0 ? totalRating / reviews.length : 0\n\n    // Calculate recommendation percentage (ratings 4-5 are considered recommendations)\n    const recommendedReviews = reviews.filter(review => review.rating >= 4).length\n    const recommendationPercentage = reviews.length > 0 \n      ? Math.round((recommendedReviews / reviews.length) * 100) \n      : 0\n\n    // Get total reviews count\n    const totalReviews = reviews.length\n\n    return NextResponse.json({\n      happyCustomers: uniqueCustomers,\n      averageRating: Math.round(averageRating * 10) / 10, // Round to 1 decimal place\n      wouldRecommend: recommendationPercentage,\n      totalReviews,\n    })\n  } catch (error) {\n    console.error('Error fetching main page stats:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe;IACpB,IAAI;QACF,0CAA0C;QAC1C,MAAM,UAAU,MAAM,sHAAA,CAAA,SAAM,CAAC,MAAM,CAAC,QAAQ,CAAC;YAC3C,QAAQ;gBACN,QAAQ;gBACR,SAAS;gBACT,QAAQ;YACV;QACF;QAEA,6DAA6D;QAC7D,MAAM,kBAAkB,IAAI,IAAI,QAAQ,GAAG,CAAC,CAAA,SAAU,OAAO,MAAM,GAAG,IAAI;QAE1E,2BAA2B;QAC3B,MAAM,cAAc,QAAQ,MAAM,CAAC,CAAC,KAAK,SAAW,MAAM,OAAO,MAAM,EAAE;QACzE,MAAM,gBAAgB,QAAQ,MAAM,GAAG,IAAI,cAAc,QAAQ,MAAM,GAAG;QAE1E,mFAAmF;QACnF,MAAM,qBAAqB,QAAQ,MAAM,CAAC,CAAA,SAAU,OAAO,MAAM,IAAI,GAAG,MAAM;QAC9E,MAAM,2BAA2B,QAAQ,MAAM,GAAG,IAC9C,KAAK,KAAK,CAAC,AAAC,qBAAqB,QAAQ,MAAM,GAAI,OACnD;QAEJ,0BAA0B;QAC1B,MAAM,eAAe,QAAQ,MAAM;QAEnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,gBAAgB;YAChB,eAAe,KAAK,KAAK,CAAC,gBAAgB,MAAM;YAChD,gBAAgB;YAChB;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mCAAmC;QACjD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}