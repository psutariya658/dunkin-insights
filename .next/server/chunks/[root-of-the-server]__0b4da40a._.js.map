{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/Admin/Desktop/project/dunkin-feedback/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient()\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":["file:///Users/Admin/Desktop/project/dunkin-feedback/src/app/api/auth/login/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport bcrypt from 'bcryptjs';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { signIn } from 'next-auth/react';\n\n// Define the expected request body type\ninterface LoginRequest {\n  email: string;\n  password: string;\n}\n\n// This route handles the login process by verifying credentials\n// and creating a session using NextAuth.js\n\n// Helper function to set CORS headers\nconst setCorsHeaders = (response: NextResponse) => {\n  const origin = process.env.NEXTAUTH_URL || 'http://localhost:3000';\n  response.headers.set('Access-Control-Allow-Origin', origin);\n  response.headers.set('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');\n  response.headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n  response.headers.set('Access-Control-Allow-Credentials', 'true');\n  return response;\n};\n\n// This is a simplified login route that works with NextAuth's built-in credential authentication\nexport async function POST(req: NextRequest) {\n  const { email, password } = await req.json();\n\n  console.log(`ðŸ”‘ Login request received for: ${email}`);\n\n  if (!email || !password) {\n    return NextResponse.json({ error: 'Email and password are required' }, { status: 400 });\n  }\n\n  try {\n    const user = await prisma.user.findUnique({\n      where: { email: email.toLowerCase() },\n    });\n\n    if (!user || !user.password) {\n      return NextResponse.json({ error: 'Invalid credentials' }, { status: 401 });\n    }\n\n    const isPasswordValid = await bcrypt.compare(password, user.password);\n\n    if (!isPasswordValid) {\n      return NextResponse.json({ error: 'Invalid credentials' }, { status: 401 });\n    }\n\n    // Determine redirect path based on user role\n    const redirectTo = user.role === 'ADMIN' ? '/admin' : '/';\n    \n    console.log(`âœ… Login successful for ${email}. Role: ${user.role}. Redirecting to: ${redirectTo}`);\n\n    return NextResponse.json({ \n        message: 'Login successful',\n        redirectTo\n    }, { status: 200 });\n\n  } catch (error) {\n    console.error('Error during login:', error);\n    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });\n  }\n}\n\n// Handle OPTIONS method for CORS preflight requests\nexport async function OPTIONS() {\n  console.log('ðŸ”„ Login OPTIONS preflight request');\n  const response = new NextResponse(null, { status: 204 });\n  return setCorsHeaders(response);\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAWA,gEAAgE;AAChE,2CAA2C;AAE3C,sCAAsC;AACtC,MAAM,iBAAiB,CAAC;IACtB,MAAM,SAAS,QAAQ,GAAG,CAAC,YAAY,IAAI;IAC3C,SAAS,OAAO,CAAC,GAAG,CAAC,+BAA+B;IACpD,SAAS,OAAO,CAAC,GAAG,CAAC,gCAAgC;IACrD,SAAS,OAAO,CAAC,GAAG,CAAC,gCAAgC;IACrD,SAAS,OAAO,CAAC,GAAG,CAAC,oCAAoC;IACzD,OAAO;AACT;AAGO,eAAe,KAAK,GAAgB;IACzC,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;IAE1C,QAAQ,GAAG,CAAC,CAAC,+BAA+B,EAAE,OAAO;IAErD,IAAI,CAAC,SAAS,CAAC,UAAU;QACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAkC,GAAG;YAAE,QAAQ;QAAI;IACvF;IAEA,IAAI;QACF,MAAM,OAAO,MAAM,sHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YACxC,OAAO;gBAAE,OAAO,MAAM,WAAW;YAAG;QACtC;QAEA,IAAI,CAAC,QAAQ,CAAC,KAAK,QAAQ,EAAE;YAC3B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAsB,GAAG;gBAAE,QAAQ;YAAI;QAC3E;QAEA,MAAM,kBAAkB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,KAAK,QAAQ;QAEpE,IAAI,CAAC,iBAAiB;YACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAsB,GAAG;gBAAE,QAAQ;YAAI;QAC3E;QAEA,6CAA6C;QAC7C,MAAM,aAAa,KAAK,IAAI,KAAK,UAAU,WAAW;QAEtD,QAAQ,GAAG,CAAC,CAAC,uBAAuB,EAAE,MAAM,QAAQ,EAAE,KAAK,IAAI,CAAC,kBAAkB,EAAE,YAAY;QAEhG,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACrB,SAAS;YACT;QACJ,GAAG;YAAE,QAAQ;QAAI;IAEnB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF;AAGO,eAAe;IACpB,QAAQ,GAAG,CAAC;IACZ,MAAM,WAAW,IAAI,gIAAA,CAAA,eAAY,CAAC,MAAM;QAAE,QAAQ;IAAI;IACtD,OAAO,eAAe;AACxB","debugId":null}}]
}