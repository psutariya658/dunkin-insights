{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/Admin/Desktop/project/dunkin-feedback/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient()\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 98, "column": 0}, "map": {"version":3,"sources":["file:///Users/Admin/Desktop/project/dunkin-feedback/src/app/api/employees/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport { prisma } from '@/lib/prisma'\nimport fs from 'fs';\nimport path from 'path';\n\nexport async function GET() {\n  try {\n    const employees = await prisma.employee.findMany({\n      where: { active: true },\n      include: {\n        reviews: {\n          select: {\n            rating: true,\n          },\n        },\n      },\n    })\n\n    // Calculate average rating for each employee\n    const employeesWithRating = employees.map(employee => {\n      const ratings = employee.reviews.map(r => r.rating);\n      const averageRating = ratings.length > 0 \n        ? ratings.reduce((sum, rating) => sum + rating, 0) / ratings.length \n        : 0;\n      \n      // Remove reviews from the response as we've calculated the average\n      const { reviews, ...employeeData } = employee;\n      \n      return {\n        ...employeeData,\n        averageRating,\n      };\n    });\n\n    return NextResponse.json(employeesWithRating)\n  } catch (error) {\n    console.error('Error fetching employees:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function POST(request: Request) {\n  try {\n    const formData = await request.formData();\n    const name = formData.get('name') as string;\n    const position = formData.get('position') as string;\n    const file = formData.get('image') as File | null;\n\n    let imageUrl = '';\n    if (file) {\n      const bytes = await file.arrayBuffer();\n      const buffer = Buffer.from(bytes);\n      const filename = `${Date.now()}-${file.name}`;\n      const uploadPath = path.join(process.cwd(), 'public/uploads', filename);\n      await fs.promises.writeFile(uploadPath, buffer);\n      imageUrl = `/uploads/${filename}`;\n    }\n\n    if (!name || !position) {\n      return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });\n    }\n\n    const employee = await prisma.employee.create({\n      data: { name, position, imageUrl },\n    });\n\n    return NextResponse.json(employee);\n  } catch (error) {\n    console.error('Error creating employee:', error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}\n\nexport async function PUT(request: Request) {\n  try {\n    const data = await request.json()\n\n    if (!data.id) {\n      return NextResponse.json(\n        { error: 'Employee ID is required' },\n        { status: 400 }\n      )\n    }\n\n    const employee = await prisma.employee.update({\n      where: { id: data.id },\n      data: {\n        name: data.name,\n        position: data.position,\n        imageUrl: data.imageUrl,\n        active: data.active,\n      },\n    })\n\n    return NextResponse.json(employee)\n  } catch (error) {\n    console.error('Error updating employee:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function DELETE(request: Request) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const id = searchParams.get('id')\n\n    if (!id) {\n      return NextResponse.json(\n        { error: 'Employee ID is required' },\n        { status: 400 }\n      )\n    }\n\n    await prisma.employee.delete({\n      where: { id },\n    })\n\n    return NextResponse.json({ success: true })\n  } catch (error) {\n    console.error('Error deleting employee:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}