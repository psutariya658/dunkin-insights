{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/Admin/Desktop/project/dunkin-feedback/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient()\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 98, "column": 0}, "map": {"version":3,"sources":["file:///Users/Admin/Desktop/project/dunkin-feedback/src/app/api/products/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport fs from 'fs';\nimport path from 'path';\n\n// GET all products with average rating\nexport async function GET() {\n  try {\n    const products = await prisma.product.findMany({\n      include: {\n        reviews: {\n          select: {\n            rating: true,\n          },\n        },\n      },\n    });\n\n    const productsWithAvgRating = products.map(product => {\n        const totalRating = product.reviews.reduce((acc, review) => acc + review.rating, 0);\n        const averageRating = product.reviews.length > 0 ? totalRating / product.reviews.length : 0;\n        const { reviews, ...productData } = product;\n        return {\n          ...productData,\n          averageRating\n        }\n      });\n  \n      return NextResponse.json(productsWithAvgRating);\n\n  } catch (error) {\n    console.error('Error fetching products:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\n// POST a new product\nexport async function POST(request: Request) {\n  try {\n    const formData = await request.formData();\n    const name = formData.get('name') as string;\n    const category = formData.get('category') as string;\n    const description = formData.get('description') as string;\n    const price = formData.get('price') as string;\n    const file = formData.get('image') as File | null;\n\n    if (!name || !category || !description || !price) {\n      return NextResponse.json(\n        { error: 'All fields are required.' },\n        { status: 400 }\n      );\n    }\n\n    let imageUrl = '';\n    if (file) {\n      const bytes = await file.arrayBuffer();\n      const buffer = Buffer.from(bytes);\n      const filename = `${Date.now()}-${file.name.replace(/\\s/g, '_')}`;\n      const uploadsDir = path.join(process.cwd(), 'public/uploads');\n      \n      if (!fs.existsSync(uploadsDir)) {\n        fs.mkdirSync(uploadsDir, { recursive: true });\n      }\n\n      const uploadPath = path.join(uploadsDir, filename);\n      fs.writeFileSync(uploadPath, buffer);\n      imageUrl = `/uploads/${filename}`;\n    }\n\n    const product = await prisma.product.create({\n      data: {\n        name,\n        category,\n        description,\n        price: parseFloat(price),\n        imageUrl,\n      },\n    });\n\n    return NextResponse.json(product);\n  } catch (error) {\n    console.error('Error creating product:', error);\n    if (error instanceof Error) {\n        return NextResponse.json({ error: error.message }, { status: 500 });\n    }\n    return NextResponse.json(\n      { error: 'An unknown error occurred' },\n      { status: 500 }\n    );\n  }\n}\n\n// PUT (update) a product\nexport async function PUT(request: Request) {\n  try {\n    const data = await request.json();\n    const { id, name, category, description, price, imageUrl } = data;\n\n    if (!id) {\n      return NextResponse.json(\n        { error: 'Product ID is required for an update.' },\n        { status: 400 }\n      );\n    }\n\n    const product = await prisma.product.update({\n      where: { id },\n      data: {\n        name,\n        category,\n        description,\n        price,\n        imageUrl,\n      },\n    });\n\n    return NextResponse.json(product);\n  } catch (error) {\n    console.error('Error updating product:', error);\n    if (error instanceof Error) {\n        return NextResponse.json({ error: error.message }, { status: 500 });\n    }\n    return NextResponse.json(\n      { error: 'An unknown error occurred' },\n      { status: 500 }\n    );\n  }\n}\n\n// DELETE a product\nexport async function DELETE(request: Request) {\n    try {\n      const { searchParams } = new URL(request.url)\n      const id = searchParams.get('id')\n  \n      if (!id) {\n        return NextResponse.json(\n          { error: 'Product ID is required' },\n          { status: 400 }\n        )\n      }\n  \n      const product = await prisma.product.findUnique({ where: { id } });\n  \n      if (product?.imageUrl) {\n        const imagePath = path.join(process.cwd(), 'public', product.imageUrl);\n        if (fs.existsSync(imagePath)) {\n          fs.unlinkSync(imagePath);\n        }\n      }\n      \n      await prisma.review.deleteMany({\n        where: { productId: id },\n      });\n  \n      await prisma.product.delete({\n        where: { id },\n      });\n  \n      return NextResponse.json({ success: true });\n    } catch (error)\n    {\n      console.error('Error deleting product:', error);\n      return NextResponse.json(\n        { error: 'Internal server error' },\n        { status: 500 }\n      );\n    }\n}"],"names":[],"mappings":"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","debugId":null}}]
}